import java.io.*;
import java.util.*;

class Employee {
    int id;
    String name;
    String sex;
    int age;
    long phone;
    double salary;

    public Employee(int id, String name, String sex, int age, long phone, double salary) {
        this.id = id;
        this.name = name;
        this.sex = sex;
        this.age = age;
        this.phone = phone;
        this.salary = salary;
    }
}

class EmployeeManagement {
    ArrayList<Employee> employees = new ArrayList<>();
    Scanner sc = new Scanner(System.in);
    Scanner scan = new Scanner(System.in);
    void writeEmployeeToFile() {
        try {
            FileWriter fw = new FileWriter("employee.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);

            System.out.print("Enter employee id: ");
            int id = sc.nextInt();
            sc.nextLine(); // to consume the newline character after nextInt()

            System.out.print("Enter employee name: ");
            String name = sc.nextLine();

            System.out.print("Enter employee sex: ");
            String sex = sc.nextLine();

            System.out.print("Enter employee age: ");
            int age = sc.nextInt();
            sc.nextLine(); // to consume the newline character after nextInt()

            System.out.print("Enter employee phone: ");
            long phone = sc.nextLong();
            sc.nextLine(); // to consume the newline character after nextLong()

            System.out.print("Enter employee salary: ");
            double salary = sc.nextDouble();

            Employee emp = new Employee(id, name, sex, age, phone, salary);
            employees.add(emp);

            StringBuilder sb = new StringBuilder();
            sb.append(" Id : ").append(emp.id)
                    .append("\n Name: ").append(emp.name)
                    .append("\n Sex : ").append(emp.sex)
                    .append("\n Age : ").append(emp.age)
                    .append("\n Phone : ").append(emp.phone)
                    .append("\n Salary : ").append(emp.salary)
                    .append("\n***********************\n");
            bw.write(sb.toString());

            bw.close();
            fw.close();
            System.out.println("Employee added and written to employee.txt successfully!");
        } catch (IOException e) {
            System.out.println("Error writing to file: " + e.getMessage());
        }
    }
    void updateEmployeeInfoById() {
        System.out.print("Enter employee id to Update: ");
        int id = sc.nextInt();
        try {
            FileWriter fw = new FileWriter("employee.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);

            System.out.print("Enter updated employee name: ");
            String name = scan.nextLine();

            System.out.print("Enter updated employee sex: ");
            String sex = scan.nextLine();

            System.out.print("Enter updated employee age: ");
            int age = scan.nextInt();
            sc.nextLine(); // to consume the newline character after nextInt()

            System.out.print("Enter updated employee phone: ");
            long phone = scan.nextLong();
            sc.nextLine(); // to consume the newline character after nextLong()

            System.out.print("Enter updated employee salary: ");
            double salary = scan.nextDouble();

            for (Employee emp : employees) {
                if (emp.id == id) {
                    emp.name = name;
                    emp.sex = sex;
                    emp.age = age;
                    emp.phone = phone;
                    emp.salary = salary;
                }
            }

            StringBuilder sb = new StringBuilder();
            sb.append(" Id : ").append(id)
                    .append("\n Name: ").append(name)
                    .append("\n Sex : ").append(sex)
                    .append("\n Age : ").append(age)
                    .append("\n Phone : ").append(phone)
                    .append("\n Salary : ").append(salary)
                    .append("\n***********************\n");
            bw.write(sb.toString());

            bw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void deleteById() {
        System.out.print("Enter employee id to delete: ");
        int id = sc.nextInt();
        try {
            BufferedReader br = new BufferedReader(new FileReader("employee.txt"));
            StringBuilder updatedFile = new StringBuilder();
            String line;
            boolean found = false;
            while ((line = br.readLine()) != null) {
                if (line.contains(" Id : " + id)) {
                    System.out.println("Employee found!");
                    found = true;
                    while (!(line = br.readLine()).contains("***********************")) {
                        // Skipping lines of employee with specified ID
                    }
                    continue;
                }
                updatedFile.append(line).append("\n");
            }
            br.close();
            if (!found) {
                System.out.println("Employee not found.");
            } else {
                FileWriter fw = new FileWriter("employee.txt");
                fw.write(updatedFile.toString());
                fw.close();
                System.out.println("Employee successfully deleted.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    void searchByID() {

        System.out.print("Enter employee id to search: ");
        int id = sc.nextInt();
        try {
            BufferedReader br = new BufferedReader(new FileReader("employee.txt"));
            String line;
            while ((line = br.readLine()) != null) {
                if (line.contains(" Id : " + id)) {
                    System.out.println("Employee found!");
                    System.out.println(line);
                    while (!(line = br.readLine()).contains("***********************")) {
                        System.out.println(line);
                    }

                    return;
                }
            }
            System.out.println("Employee not found.");
            br.close();
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }
    void readEmployeeFromFile() {
          int flag=0;
        try {

            FileReader fr = new FileReader("employee.txt");
            BufferedReader br = new BufferedReader(fr);
            String line;

            while ((line = br.readLine()) != null) {
                flag++;
                if(flag==1){
                    System.out.println("Here is information of all employees found in the company :-");
                }
                System.out.println(line);
            }
          if(flag==0){
              System.out.println("There is no employee Added to the file.");
          }

            br.close();
            fr.close();
        } catch (IOException e) {
            System.out.println("Error reading from file: " + e.getMessage());
        }
    }



}
public class Main {
    public static void main(String[] args) {
        boolean flag = true;
        EmployeeManagement employees = new EmployeeManagement();
        while (flag) {
            System.out.println("<<<<<<<<<< WELL COME TO EMPLOYEE INFORMATION SYSTEM >>>>>>>>>>>>>>>");
            System.out.println("HERE is OPERATIONS the SYSTEM can provide  ");
            System.out.println("1. Add the information of new Employee ");
            System.out.println("2. Update information of existing Employee ");
            System.out.println("3. search an employee ");
            System.out.println("4. Delete a fired Employee ");
            System.out.println("5. Display all Employee ");
            System.out.println("6. EXIT ");
            Scanner scan = new Scanner(System.in);


            System.out.println("enter the number which u want to perform");
            int choose = scan.nextInt();
            //  System.out.println(choose);
            switch (choose) {
                case 1:
                   employees.writeEmployeeToFile();
                    break;
                case 2:
                    employees.updateEmployeeInfoById();
                    break;
                case 3:
                   employees.searchByID() ;
                    break;
                case 4:
                    employees.deleteById() ;
                    break;
                case 5:
                    employees.readEmployeeFromFile();
                    break;
                case 6:
                    flag = false;
                    break;
                default:
                    System.out.println("default");
            }
        }
    }}
